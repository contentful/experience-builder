name: Publish packages

on:
  workflow_call:
    secrets:
      VAULT_URL:
        required: true

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Checkout all branches and tags, needed for publish
      - name: 'Use NodeJS 20'
        uses: actions/setup-node@v4
        with:
          node-version: '20.11'
      # Retrieve token from Vault and use in .npmrc for installing npm packages from the GitHub registry
      # See https://contentful.atlassian.net/wiki/spaces/ENG/pages/4396155213/Migrating+to+GitHub+Packages+from+npmjs?focusedCommentId=4431282518
      - name: 'Retrieve NPM Token from Vault'
        id: vault
        uses: hashicorp/vault-action@v2.4.3
        with:
          url: ${{ secrets.VAULT_URL }}
          role: ${{ github.event.repository.name }}-github-action
          method: jwt
          path: github-actions
          exportEnv: false
          secrets: |
            secret/data/github/github_packages_write GITHUB_PACKAGES_WRITE_TOKEN | GITHUB_PACKAGES_WRITE_TOKEN ;
      - name: Install dependencies
        run: |
          npm ci
        env:
          GITHUB_TOKEN: ${{ steps.vault.outputs.GITHUB_PACKAGES_WRITE_TOKEN }}
      - name: Restore the build folders
        uses: actions/cache/restore@v3
        with:
          path: |
            packages/components/styles.css
            packages/*/dist
            packages/*/build
          key: build-cache-${{ github.run_id }}-${{ github.run_attempt }}
      # - name: Authenticate with private GH package
      #   run: echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}\n@contentful:registry=https://npm.pkg.github.com" > ~/.npmrc
      #   env:
      #     GITHUB_TOKEN: ${{ steps.vault.outputs.GITHUB_PACKAGES_WRITE_TOKEN }}
      - name: 'Version and publish'
        env:
          GITHUB_TOKEN: ${{ steps.vault.outputs.GITHUB_PACKAGES_WRITE_TOKEN }}
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor}}@users.noreply.github.com"

          if [ ${{ github.ref_name }} = development ]; then
            npx lerna publish prerelease --exact --conventional-commits --conventional-prerelease --preid dev-$(date +%Y%m%dT%H%M)-$(git rev-parse HEAD  | cut -c1-7) --no-changelog --no-git-tag-version --dist-tag dev --no-push --yes
          elif [ ${{ github.ref_name }} = gh-package-publish-fix ]; then
            npx lerna publish prerelease --exact --conventional-commits --conventional-prerelease --preid dev-$(date +%Y%m%dT%H%M)-$(git rev-parse HEAD  | cut -c1-7) --no-changelog --no-git-tag-version --dist-tag dev --no-push --yes --allowBranch='gh-package-publish-fix'
          elif [ ${{ github.ref_name }} = next ]; then
            npx lerna publish prerelease --exact --conventional-commits --conventional-prerelease --preid alpha --yes --no-private --dist-tag latest
          else
            npx lerna publish --conventional-commits --conventional-graduate --yes --no-private --create-release github --dist-tag latest
          fi

          # merge upstream package version changes to next/dev 

          if [ ${{ github.ref_name }} = main ]; then
            git checkout next
            git rebase main
            git push origin
            git checkout development
            git rebase next
            git push origin
          elif [ ${{ github.ref_name }} = next ]; then
            git checkout development
            git rebase next
            git push origin
          fi
