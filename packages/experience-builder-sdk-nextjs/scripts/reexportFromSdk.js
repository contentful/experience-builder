/**
 * This script reads the main barrel file of the React SDK and writes them to a file so they can be exported from the NextJS SDK.
 * This i useful to keep the exports up-to-date and avoid manual maintenance.
 * It is ran before each build from the package.json scripts.
 */
import * as fs from 'fs';
import * as path from 'path';
import * as ts from 'typescript';
import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

// list of modules to not export from the SDK as these are reimplemented in the Next.js SDK
const excludedModules = ['ExperienceRoot', 'fetchById', 'fetchBySlug'];

async function formatWithPrettier(filePath) {
  try {
    await execAsync(`npx prettier --write "${filePath}"`);
    console.log('Successfully formatted:', filePath);
  } catch (error) {
    console.warn('Failed to format file:', error);
  }
}

async function reexportModules(inputFile, outputFile) {
  // Read and parse the input file
  const sourceFile = ts.createSourceFile(
    inputFile,
    fs.readFileSync(inputFile, 'utf-8'),
    ts.ScriptTarget.Latest,
  );

  // Create map to group exports by module
  const moduleExports = new Map();

  // Visit each node in the source file
  ts.forEachChild(sourceFile, (node) => {
    if (ts.isExportDeclaration(node)) {
      const moduleSpecifier = node.moduleSpecifier?.getText(sourceFile).replace(/['"]/g, '');

      if (moduleSpecifier) {
        const isExternalPackage = !moduleSpecifier.startsWith('.');
        const isFromCoreTypes = moduleSpecifier === '@contentful/experiences-core/types';
        const newModuleSpecifier = isExternalPackage
          ? moduleSpecifier
          : '@contentful/experiences-sdk-react';

        // Handle named exports
        if (node.exportClause && ts.isNamedExports(node.exportClause)) {
          const exportNames = node.exportClause.elements
            .filter((e) => !excludedModules.includes(e.name.text))
            .map((e) => e.name.text);

          if (exportNames.length) {
            // Add to module map
            if (!moduleExports.has(newModuleSpecifier)) {
              moduleExports.set(newModuleSpecifier, { names: [], isType: isFromCoreTypes });
            }
            moduleExports.get(newModuleSpecifier).names.push(...exportNames);
          }
        }
      }
    }
  });

  const headerComment = `/**
 * ⚠️ WARNING: DO NOT MODIFY THIS FILE DIRECTLY ⚠️
 * 
 * This file is auto-generated by reexportFromSdk.js before each build.
 * Any direct modifications will be overwritten.
 * 
 * To make changes, modify the source barrel file and run the build script.
 *
 * Note: any 'export * from' statements in the source barrel file will be ignored. Export items individually.
 */\n\n`;

  const exportStatements = Array.from(moduleExports.entries())
    .map(([moduleSpecifier, { names, isType }]) => {
      const typePrefix = isType ? 'type ' : '';
      return `export ${typePrefix}{ ${[...new Set(names)].sort().join(', ')} } from '${moduleSpecifier}';`;
    })
    .join('\n');

  // Write the transformed exports with header
  fs.writeFileSync(outputFile, headerComment + exportStatements);
  await formatWithPrettier(outputFile);
}

// Example usage
const barrelFilePath = path.resolve('.', '../experience-builder-sdk/src/index.ts');
const newFilePath = path.resolve('.', './src/sdkExports.ts');
reexportModules(barrelFilePath, newFilePath);
